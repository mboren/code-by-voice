#
# This is a config file for Dragonfly's _multiedit.py command-module.
#  To use this config, you must rename this file to _multiedit.txt and
#  place it in the same directory as the _multiedit.py file.
#

# Pull in all of Dragonfly's action objects so that we can use them here.

from dragonfly import *


#---------------------------------------------------------------------------
# Here we define the release action which releases all
#  modifier-keys used within this grammar.  It is defined here
#  because this functionality is used in many different places.
#  Note that it is harmless to release ("...:up") a key multiple
#  times or when that key is not held down at all.

release = Key("shift:up, ctrl:up")


#---------------------------------------------------------------------------
# Here we define the single-action commands.  These can be spoken
#  in series so as to execute multiple actions within a single utterance.

cmd.map = {
    # Spoken-form    ->    ->    ->     Action object
    "up [<n>]":                         Key("up:%(n)d"),
    "down [<n>]":                       Key("down:%(n)d"),
    "left [<n>]":                       Key("left:%(n)d"),
    "right [<n>]":                      Key("right:%(n)d"),
    "page up [<n>]":                    Key("pgup:%(n)d"),
    "page down [<n>]":                  Key("pgdown:%(n)d"),
    "up <n> (page | pages)":            Key("pgup:%(n)d"),
    "down <n> (page | pages)":          Key("pgdown:%(n)d"),
    "left <n> (word | words)":          Key("c-left:%(n)d"),
    "right <n> (word | words)":         Key("c-right:%(n)d"),
    "home":                             Key("home"),
    "end":                              Key("end"),

    "space [<n>]":                      release + Key("space:%(n)d"),
    "enter [<n>]":                      release + Key("enter:%(n)d"),
    "tab [<n>]":                        Key("tab:%(n)d"),
    "delete [<n>]":                     release + Key("del:%(n)d"),
    "delete [<n> | this] (line|lines)": release + Key("home, s-down:%(n)d, del"),
    "backspace [<n>]":                  release + Key("backspace:%(n)d"),

    "paste":                            release + Key("c-v"),
    "duplicate <n>":                    release + Key("c-c, c-v:%(n)d"),
    "copy":                             release + Key("c-c"),
    "cut":                              release + Key("c-x"),
    "select all":                       release + Key("c-a"),
    "[hold] shift":                     Key("shift:down"),
    "release shift":                    Key("shift:up"),
    "[hold] control":                   Key("ctrl:down"),
    "release control":                  Key("ctrl:up"),
    "release [all]":                    release,

    "say <text>":                       release + Text("%(text)s"),
    "mimic <text>":                     release + Mimic(extra="text"),

    "sear":                             Key("0"),
    "Boone":                            Key("1"),
    "dose":                             Key("2"),
    "trace":                            Key("3"),
    "quattro":                          Key("4"),
    "sinko":                            Key("5"),
    "sais":                             Key("6"),
    "sever":                            Key("7"),
    "Ocho":                             Key("8"),
    "nonce":                            Key("9"),

    "sky arch":                         Key("A"),
    "sky brav":                         Key("B"),
    "sky char":                         Key("C"),
    "sky Dell":                         Key("D"),
    "sky etch":                         Key("E"),
    "sky fomp":                         Key("F"),
    "sky goof":                         Key("G"),
    "sky hark":                         Key("H"),
    "sky ice":                          Key("I"),
    "sky jinks":                        Key("J"),
    "sky coop":                         Key("K"),
    "sky lug":                          Key("L"),
    "sky mug":                          Key("M"),
    "sky nerb":                         Key("N"),
    "sky orc":                          Key("O"),
    "sky pooch":                        Key("P"),
    "sky quash":                        Key("Q"),
    "sky Roche":                        Key("R"),
    "sky souk":                         Key("S"),
    "sky toy":                          Key("T"),
    "sky unks":                         Key("U"),
    "sky verge":                        Key("V"),
    "sky Wick":                         Key("W"),
    "sky treks":                        Key("X"),
    "sky Yank":                         Key("Y"),
    "sky zooch":                        Key("Z"),

    "arch":                             Key("a"),
    "brav":                             Key("b"),
    "char":                             Key("c"),
    "Dell":                             Key("d"),
    "etch":                             Key("e"),
    "fomp":                             Key("f"),
    "goof":                             Key("g"),
    "Hark":                             Key("h"),
    "ice":                              Key("i"),
    "Jinks":                            Key("j"),
    "coop":                             Key("k"),
    "lug":                              Key("l"),
    "mug":                              Key("m"),
    "nerb":                             Key("n"),
    "orc":                              Key("o"),
    "pooch":                            Key("p"),
    "quash":                            Key("q"),
    "Roche":                            Key("r"),
    "souk":                             Key("s"),
    "toy":                              Key("t"),
    "unks":                             Key("u"),
    "verge":                            Key("v"),
    # finding a good word for 'w' has been a struggle
    "wick":                             Key("w"),
    "treks":                            Key("x"),
    "yank":                             Key("y"),
    "zooch":                            Key("z"),

    # common vim letter combos
    "yank yank":                        Key("y,y"), # copy a line
    "yank yank pooch":                  Key("y,y,p"), # duplicate a line
    "dell dell":                        Key("d,d"), # delete a line

    # symbols
    "dot":                              Key("dot"),
    "splat":                            Key("asterisk"),
    "Mandy":                            Key("ampersand"),
    "cash":                             Key("dollar"),
    "bang":                             Key("exclamation"),
    "hook":                             Key("question"),
    "hash":                             Key("hash"),
    "grape":                            Key("percent"),
    "pipe":                             Key("bar"),
    "tick":                             Key("squote"),
    "plus":                             Key("plus"),
    "equals":                           Key("equal"),
    "eagle":                            Key("equal"),
    "minus":                            Key("minus"),
    "quote":                            Key("dquote"),
    "score":                            Key("underscore"),
    "dash":                             Key("minus"),

    # delay for colon is to work around a VSCode issue that mixes
    # up certain characters when they are sent too fast.
    "colon":                            Key("colon/0.3"),
    "slash":                            Key("slash"),
    "backslash":                        Key("backslash"),
    "comma":                            Key("comma"),
    "snail":                            Key("at"),
    "hat":                              Key("caret"),
    "backtick":                         Key("backtick"),
    "tilde":                            Key("tilde"),
    "semi":                             Text(";"),

    "L'Engle":                          Key("langle"),
    "Wrangle":                          Key("rangle"),
    "lap":                              Key("lparen"),
    "rap":                              Key("rparen"),
    "lack":                             Key("lbracket"),
    "rack":                             Key("rbracket"),
    "lace":                             Key("lbrace"),
    "race":                             Key("rbrace"),
    "slap":                             Key("enter"),

    # multi symbol stuff
    "wide plus":                        Key("space, plus, space"),
    "wide minus":                       Key("space, minus, space"),
    "week will":                       Key("space, equal, space"),
    "curry":                            Key("space, minus, rangle"),
    "bit left":                         Key("langle,langle"),
    "bit right":                        Key("rangle,rangle"),

    # preprocessor directives
    "hash include angle":               Text("#include ") + Key("langle") + Key("rangle") + Key("left"),
    "hash include quote":               Text("#include ") + Key("dquote,dot,h,dquote,left,left,left"),
    "hash if in deaf":                  Text("#ifndef "),
    "hash if":                          Text("#if "),
    "hash define":                      Text("#define "),
    "hash end if":                      Text("#endif "),
    "preprocessor start":               Text("#if 0"),
    "preprocessor stop":                Text("#endif "),

    # convenience macros
    "done":                             Key("end") + Text(";") + Key("enter"),
    "block":                            Key("end") + Key("enter") + Key("lbrace") + Key("enter") + Key("rbrace") + Key("up") + Key("enter"),

    # C++ keywords
    "return":                           Text("return "),
    "class":                            Text("class "),
    "struct":                           Text("struct "),
    "double":                           Text("double "),
    "bool":                             Text("bool "),
    "const":                            Text("const "),
    "mint":                             Text("int "),
    "void":                             Text("void "),
    "if line":                          Text("if") + Key("lparen,rparen,left"),
    "else":                             Text("else"),
    "while loop":                       Text("while") + Key("lparen,rparen,left"),
    "for loop":                         Text("for") + Key("lparen,rparen,left"),
    "big for loop":                     Text("for()") + Key("enter,lbrace,enter,rbrace,up,up,right,right,right"),
    "true":                             Text("true"),
    "false":                            Text("false"),

    # no matter how hard i try, i can't get dragon to recognize the word 'null'
    "noodle":                           Text("NULL"),
    "noodle pointer":                   Text("nullptr"),

    # easy logging++
    "log info":                         Key("L,O,G,lparen,I,N,F,O,rparen"),
    "log info line":                    Text("LOG(INFO) << ;") + Key("left"),

    # standard library
    "STD string":                       Text("std::string"),
    "sea out":                          Text("std::cout << "),
    "end line":                         Text(" << std::endl"),
    "STD vector":                       Text("std::vector"),
    "STD":                              Text("std::"),
    "eye oh stream":                    Text("iostream"),

    # Google test
    "big test":                         Text("TEST()") + Key("left"),
    "expect equal":                     Text("EXPECT_EQ();") + Key("left") + Key("left"),
    "expect float equal":               Text("EXPECT_FLOAT_EQ();") + Key("left") + Key("left"),
    "expect double equal":              Text("EXPECT_DOUBLE_EQ();") + Key("left") + Key("left"),

    # Python
    "pie deaf":                         Text("def "),
    "pie for":                          Text("for "),
    "pie range":                        Text("range"),
    "pie ranges":                       Text("range()") + Key("left"),
    "in":                               Text(" in "),
    "piff":                             Text("if "),

    "self":                             Text("self"),

    # Elm
    "import":                           Text("import "),
    "exposing":                         Text(" exposing ()") + Key("left"),
    "missive":                          Text("Msg"),

    # vim specific stuff
    "whiplash":                         Key("escape") + Key("colon, w, enter"),
    "dune":                             Key("escape") + Key("o"),
    "make include guard":               Key("escape") + Text("ea_H") + Key("escape") + Text("yiwi#ifndef ") + Key("escape") + Text("o#define ") + Key("escape") + Text("po#endif // ifndef ") + Key("escape,p,O,escape"),
    "viewport":                         Key("escape, c-w"),
    "go buff [<n>]":                    Key("escape, %(n)d, c-caret"),
    "buff":                             Key("escape, colon, b, space"),
    "list buffers":                     Key("escape, colon") + Text("ls") + Key("enter"),
    "list all buffers":                 Key("escape, colon") + Text("ls!") + Key("enter"),
    "next buff":                        Key("escape, colon, n, enter"),
    "previous buff":                    Key("escape, colon, N, enter"),

    # these commands get their own section because i love them
    "chip":                             Key("c, i, lparen"),
    "chick":                            Key("c, i, dquote"),

    # working with git merge conflicts
    #  I had a really horrific merge to deal with a while ago and i put this
    #  together to make it easier to manage. I honestly don't remember how this
    #  works and I'd be afraid to use it again, but I feel that it deserves a
    #  place in my commit history.
    "find headlines":                   Key("escape") + Text("/<<<<<<< HEAD") + Key("enter"),
    "find midlines":                    Key("escape") + Text("/=======") + Key("enter"),
    "find branch lines":                Key("escape") + Text("/>>>>>>>") + Key("enter"),

    "comment matches":                  Key("escape") + Text(":g//normal 0i//") + Key("enter"),
    "increase matches":                 Key("escape") + Text(":g//normal 0") + Key("c-v") + Key("c-a") + Key("enter"),
    "decrease matches":                 Key("escape") + Text(":g//normal 0") + Key("c-v") + Key("c-x") + Key("enter"),
    "record Mark merge":                Key("escape") + Text("qmk/<<<<<<<") + Key("enter") + Text("ma/=======") + Key("enter") + Text("mb/>>>>>>>") + Key("enter") + Text("mc'akq"),
    "comment head":                     Key("escape") + Text("'aj") + Key("c-v") + Text("'bkI//head") + Key("escape") + Text("'ak"),
    "comment branch":                   Key("escape") + Text("'bj") + Key("c-v") + Text("'ckI//branch") + Key("escape") + Text("'ak"),
    "uncommon head":                    Key("escape") + Text(":%s/\\/\\/head//") + Key("enter"),
    "uncommon branch":                  Key("escape") + Text(":%s/\\/\\/branch//") + Key("enter"),
    "next merge":                       Key("escape") + Text("'cj@m"),
    "previous merge":                   Key("escape") + Text("'ak?<<<<<") + Key("enter") + Text("k@m"),

    # Excel stuff
    "slide up":                         Key("cs-up"),
    "slide right":                      Key("cs-right"),
    "slide down":                       Key("cs-down"),
    "slide left":                       Key("cs-left"),
    "glide up":                         Key("c-up"),
    "glide right":                      Key("c-right"),
    "glide down":                       Key("c-down"),
    "glide left":                       Key("c-left"),

    # shell
    "seedy":                            Key("c,d,space"),
    "Petey":                            Key("p,u,s,h,d,space"),
    "slash user":                       Text("/usr"),
    "slash local":                      Text("/local"),
    "slash bin":                        Text("/bin"),
    "slash upper":                      Text("/.."),
    "cat":                              Key("c,a,t,space"),
    "vim gulf":                         Text("vimgolf"),

    # virtual desktops
    "barge":                            Key("wc-left"),
    "wacker":                           Key("wc-right"),

    # console
    "sofa":                             Key("c-backtick"),

}


#---------------------------------------------------------------------------
# Here we define various functions for formatting text.
# Each of these functions must have a docstring which defines its
#  spoken-form.  This docstring must include the "<dictation>" extra.
#  See below for various examples.

# Format: some_words
def format_snake(dictation):          # Function name must start with "format_".
    """ snake <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return "_".join(text.split(" "))  # Put underscores between words.

def format_jive(dictation):          # Function name must start with "format_".
    """  jive <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return "-".join(text.split(" "))  # Put underscores between words.

def format_dotty(dictation):          # Function name must start with "format_".
    """ Dotty <dictation> """         # Docstring defining spoken-form.
    text = str(dictation).lower()             # Get written-form of dictated text.
    return ".".join(text.split(" "))  # Put underscores between words.

# Format: some_words()
def format_under_function(dictation):
    """ funky <dictation> """
    text = str(dictation).lower()
    return "_".join(text.split(" ")) + "()"

# Format: SomeWords
def format_studley(dictation):
    """ studley <dictation> """
    text = str(dictation)
    words = [word.capitalize() for word in text.split(" ")]
    return "".join(words)

# Format: somewords
def format_one_word(dictation):
    """ [all] one word <dictation> """
    text = str(dictation)
    return "".join(text.split(" "))

# Format: SOMEWORDS
def format_upper_one_word(dictation):
    """ one word upper <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "".join(words)

# Format: SOME_WORDS
def format_upper_score(dictation):
    """ upper score <dictation> """
    text = str(dictation)
    words = [word.upper() for word in text.split(" ")]
    return "_".join(words)

# Format: someWords
def format_camel(dictation):
    """ camel <dictation> """
    text = str(dictation)
    words = text.split(" ")
    return words[0].lower() + "".join(w.capitalize() for w in words[1:])

